/*
Quando seu sistema vai fazer várias chamadas em um sistema 
externo que talvez esteja fora do ar, imagine que se 
tivermos 100 clientes para integrar e o sistema externo 
tiver fora do ar, vamos fazer 100 requisicoes ATOA, 
isso consome tempo e processamento sem necessidade... 
nesse caso podemos usar o circuit breaker, com ele vc 
estabelece um limite de tentativas para integrar caso 
o sistema externo esteja fora, depois de X tentativas
de integrar com falha, ele nem envia mais a requisicao
apenas retorna o erro direto... É o que chamamos de
retorno alternativo.
*/

private Integer tentativasDeIntegrar = 0;
private Integer limiteDeTentativas = 10;
private ClienteService service;

private void enviaParaIntegrar(){
	List<ClienteDto> clientes = service.buscaClientesParaIntegrar();
	for(ClienteDto cliente : clientes){
		HttpRequest requisicao = new HttpRequest('endpoint');
		requisicao.setBody(cliente);
		requisicao.setMethod('POST')
		envia(requisicao);
	}	
}

private HttpResponse envia(HttpRequest requisicao){		
	if(this.tentativasDeIntegrar >= this.limiteDeTentativas)
		throw new LimitException('Erro: Web Service está fora do ar');
        
	HttpResponse resposta = new Http().send(requisicao);
        
	if(resposta.getStatusCode() >= 400){
		limiteDeTentativas++;
		throw new CalloutException('Erro: Web Service está fora do ar');
	}
        
	System.debug('Conta enviada ao Webservice ');
	return resposta;
}
